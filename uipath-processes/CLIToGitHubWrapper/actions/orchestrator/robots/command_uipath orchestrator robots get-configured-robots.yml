name: uipath-orchestrator-robots-get-configured-robots
description: |
  NAME:
     uipath orchestrator robots get-configured-robots - Gets robots autoprovisioned from users

  USAGE:
     uipath orchestrator robots get-configured-robots [command options] [arguments...]

  DESCRIPTION:
     OAuth required scopes: OR.Robots or OR.Robots.Read.

     Required permissions: (Users.View - Required only when the robot's user is expanded) and (Robots.View).

  OPTIONS:
     --folder-id integer (required)
        Folder/OrganizationUnit Id

     --count boolean
        Indicates whether the total count of items within a collection are returned in the result.

     --expand string
        Indicates the related entities to be represented inline. The maximum depth is 2.

     --filter string
        Restricts the set of items returned. The maximum number of expressions is 100.

     --orderby string
        Specifies the order in which items are returned. The maximum number of expressions is 5.

     --select string
        Limits the properties returned in the result.

     --skip integer
        Excludes the specified number of items of the queried collection from the result.

     --top integer
        Limits the number of items returned from a collection. The maximum value is 1000.
  
on:
  workflow_call:
    inputs:
      folder_id:
        description: Folder/OrganizationUnit Id
        required: true
        type: number
      count:
        description: Indicates whether the total count of items within a collection are returned in the result.
        required: false
        type: boolean
        default: false
      expand:
        description: Indicates the related entities to be represented inline. The maximum depth is 2.
        required: false
        type: string
        default: ''
      filter:
        description: Restricts the set of items returned. The maximum number of expressions is 100.
        required: false
        type: string
        default: ''
      orderby:
        description: Specifies the order in which items are returned. The maximum number of expressions is 5.
        required: false
        type: string
        default: ''
      select:
        description: Limits the properties returned in the result.
        required: false
        type: string
        default: ''
      skip:
        description: Excludes the specified number of items of the queried collection from the result.
        required: false
        type: number
        default: 0
      top:
        description: Limits the number of items returned from a collection. The maximum value is 1000.
        required: false
        type: number
        default: 1000
jobs:
  run_uipath_orchestrator_robots_get_configured_robots:
    runs-on: [windows, self-hosted]
    outputs: {}
    steps:
      - name: Run uipath orchestrator robots get-configured-robots
        shell: pwsh
        run: |
          # Initialize an array to construct the command
          $args = @('uipath', 'orchestrator', 'robots', 'get-configured-robots')
          
          # Required argument --folder-id
          $args += '--folder-id'
          $args += ${{ inputs.folder_id }}

          # Optional boolean --count (only add if true)
          if (${{ inputs.count }} -eq $true) {
              $args += '--count'
              $args += 'true'
          }

          # Optional string --expand (add if not empty)
          if ('${{ inputs.expand }}'.Trim().Length -gt 0) {
              $args += '--expand'
              $args += '${{ inputs.expand }}'
          }

          # Optional string --filter (add if not empty)
          if ('${{ inputs.filter }}'.Trim().Length -gt 0) {
              $args += '--filter'
              $args += '${{ inputs.filter }}'
          }

          # Optional string --orderby (add if not empty)
          if ('${{ inputs.orderby }}'.Trim().Length -gt 0) {
              $args += '--orderby'
              $args += '${{ inputs.orderby }}'
          }

          # Optional string --select (add if not empty)
          if ('${{ inputs.select }}'.Trim().Length -gt 0) {
              $args += '--select'
              $args += '${{ inputs.select }}'
          }

          # Optional integer --skip (add if greater than 0)
          if (${{ inputs.skip }} -gt 0) {
              $args += '--skip'
              $args += ${{ inputs.skip }}
          }

          # Optional integer --top (add if less than 1000, else default is 1000)
          if (${{ inputs.top }} -lt 1000 -and ${{ inputs.top }} -gt 0) {
              $args += '--top'
              $args += ${{ inputs.top }}
          }

          # Output the constructed command (for debugging, can be removed)
          Write-Host "Running command:" ($args -join ' ')

          # Invoke the CLI command with the assembled arguments
          & $args[0] $args[1..($args.Length - 1)] | Write-Output