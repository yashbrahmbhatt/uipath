name: 'uipath-orchestrator-test-data-queue-items-get-by-id'
description: |-
  NAME:
     uipath orchestrator test-data-queue-items get-by-id - Return a specific test data queue item identified by key

  USAGE:
     uipath orchestrator test-data-queue-items get-by-id [command options] [arguments...]

  DESCRIPTION:
     OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Read.

     Required permissions: TestDataQueueItems.View.

     Responses:
     200 Returns a specific test data queue item identified by key
     403 If the caller doesn't have permissions to view test data queue items
     404 If the test data queue item is not found

  OPTIONS:
     --folder-id integer (required)
        Folder/OrganizationUnit Id

     --key integer (required)

     --expand string
        Indicates the related entities to be represented inline. The maximum depth is 2.

     --select string
        Limits the properties returned in the result.
  
on:
  workflow_call:
    inputs:
      folder_id:
        description: 'Folder/OrganizationUnit Id (required)'
        required: true
        type: string
      key:
        description: 'Key identifying the test data queue item (required)'
        required: true
        type: string
      expand:
        description: 'Indicates the related entities to be represented inline. The maximum depth is 2.'
        required: false
        type: string
        default: ''
      select:
        description: 'Limits the properties returned in the result.'
        required: false
        type: string
        default: ''
    secrets: {}

jobs:
  run-get-by-id:
    runs-on: [windows, self-hosted]
    outputs: {}
    steps:
      - name: Invoke UiPath Orchestrator test-data-queue-items get-by-id command
        shell: pwsh
        run: |
          # Initialize arguments array with the base command and required arguments
          $args = @(
            'orchestrator', 'test-data-queue-items', 'get-by-id',
            '--folder-id', ${{ inputs.folder_id }},
            '--key', ${{ inputs.key }}
          )
          
          # Conditionally add --expand if provided and not empty
          if ('${{ inputs.expand }}'.Trim() -ne '') {
            $args += '--expand'
            $args += '${{ inputs.expand }}'
          }
          
          # Conditionally add --select if provided and not empty
          if ('${{ inputs.select }}'.Trim() -ne '') {
            $args += '--select'
            $args += '${{ inputs.select }}'
          }

          # Execute the command with constructed arguments
          uipath @args