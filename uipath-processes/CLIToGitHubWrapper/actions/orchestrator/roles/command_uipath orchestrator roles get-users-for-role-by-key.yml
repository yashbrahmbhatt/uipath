name: uipath-orchestrator-roles-get-users-for-role-by-key
description: |
  NAME:
     uipath orchestrator roles get-users-for-role-by-key - Returns a collection of all users and, if no other sorting is provided, will place first those associated to a role.Allows odata query options.

  USAGE:
     uipath orchestrator roles get-users-for-role-by-key [command options] [arguments...]

  DESCRIPTION:
     OAuth required scopes: OR.Users or OR.Users.Read.

     Required permissions: Roles.View and Users.View.

  OPTIONS:
     --key integer (required)
        The Id of the role for which the associated users are placed first.

     --count boolean
        Indicates whether the total count of items within a collection are returned in the result.

     --expand string
        Indicates the related entities to be represented inline. The maximum depth is 2.

     --filter string
        Restricts the set of items returned. The maximum number of expressions is 100.

     --orderby string
        Specifies the order in which items are returned. The maximum number of expressions is 5.

     --select string
        Limits the properties returned in the result.

     --skip integer
        Excludes the specified number of items of the queried collection from the result.

     --top integer
        Limits the number of items returned from a collection. The maximum value is 1000.
  
on:
  workflow_call:
    inputs:
      key:
        description: 'The Id of the role for which the associated users are placed first (required)'
        required: true
        type: integer
      count:
        description: 'Indicates whether the total count of items within a collection are returned in the result'
        required: false
        type: boolean
        default: false
      expand:
        description: 'Indicates the related entities to be represented inline. The maximum depth is 2'
        required: false
        type: string
        default: ''
      filter:
        description: 'Restricts the set of items returned. The maximum number of expressions is 100'
        required: false
        type: string
        default: ''
      orderby:
        description: 'Specifies the order in which items are returned. The maximum number of expressions is 5'
        required: false
        type: string
        default: ''
      select:
        description: 'Limits the properties returned in the result'
        required: false
        type: string
        default: ''
      skip:
        description: 'Excludes the specified number of items of the queried collection from the result'
        required: false
        type: integer
        default: 0
      top:
        description: 'Limits the number of items returned from a collection. The maximum value is 1000'
        required: false
        type: integer
        default: 0

jobs:
  call-uipath-roles-get-users:
    runs-on: [windows, self-hosted]
    outputs:
      # If required, outputs could be added here such as response content
    steps:
      - name: Run uipath orchestrator roles get-users-for-role-by-key
        shell: pwsh
        run: |
          # Initialize the arguments array for the CLI command
          $args = @('orchestrator', 'roles', 'get-users-for-role-by-key')

          # Mandatory key parameter
          $args += '--key'
          $args += "${{ inputs.key }}"

          # Optional boolean parameter: --count
          if ('${{ inputs.count }}' -eq 'true') {
            $args += '--count'
            $args += 'true'
          }

          # Optional string parameters - add only if not empty
          if ('${{ inputs.expand }}'.Trim() -ne '') {
            $args += '--expand'
            $args += '${{ inputs.expand }}'
          }

          if ('${{ inputs.filter }}'.Trim() -ne '') {
            $args += '--filter'
            $args += '${{ inputs.filter }}'
          }

          if ('${{ inputs.orderby }}'.Trim() -ne '') {
            $args += '--orderby'
            $args += '${{ inputs.orderby }}'
          }

          if ('${{ inputs.select }}'.Trim() -ne '') {
            $args += '--select'
            $args += '${{ inputs.select }}'
          }

          # Optional integer parameters: add only if greater than zero
          if (${{ inputs.skip }} -gt 0) {
            $args += '--skip'
            $args += "${{ inputs.skip }}"
          }

          if (${{ inputs.top }} -gt 0) {
            $args += '--top'
            $args += "${{ inputs.top }}"
          }

          # Output constructed command for debug (can be removed or commented)
          Write-Host "Executing command: uipath $($args -join ' ')"

          # Execute the CLI command
          uipath @args
