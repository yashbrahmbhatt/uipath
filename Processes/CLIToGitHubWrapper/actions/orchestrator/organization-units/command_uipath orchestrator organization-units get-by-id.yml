description: |
  NAME:
     uipath orchestrator organization-units get-by-id - Gets an organization unit.

  USAGE:
     uipath orchestrator organization-units get-by-id [command options] [arguments...]

  DESCRIPTION:
     OAuth required scopes: OR.Folders or OR.Folders.Read.

     Required permissions: Units.View.
     DEPRECATED: 
     Kept for backwards compatibility. Use Get from FoldersController  instead
     Please refer to https://docs.uipath.com/orchestrator/reference

  OPTIONS:
     --key integer (required)

     --expand string
        Indicates the related entities to be represented inline. The maximum depth is 2.

     --select string
        Limits the properties returned in the result.

name: uipath-orchestrator-organization-units-get-by-id
on:
  workflow_call:
    inputs:
      key:
        description: 'Organization unit key (integer). Required.'
        required: true
        type: number
      expand:
        description: 'Related entities to be represented inline. Max depth 2.'
        required: false
        type: string
        default: ''
      select:
        description: 'Limits the properties returned in the result.'
        required: false
        type: string
        default: ''
    secrets: {}

jobs:
  get-organization-unit-by-id:
    runs-on: [windows, self-hosted]
    outputs:
      command: ${{ steps.run-command.outputs.command }}
    steps:
      - name: Run uipath orchestrator organization-units get-by-id
        id: run-command
        shell: pwsh
        run: |
          # Construct the command arguments array
          $args = @('orchestrator', 'organization-units', 'get-by-id')

          # Required parameter --key
          $args += '--key'
          $args += "${{ inputs.key }}"

          # Optional --expand parameter
          if ('${{ inputs.expand }}'.Trim() -ne '') {
            $args += '--expand'
            $args += '${{ inputs.expand }}'
          }

          # Optional --select parameter
          if ('${{ inputs.select }}'.Trim() -ne '') {
            $args += '--select'
            $args += '${{ inputs.select }}'
          }

          # Join arguments into a single string command
          $command = "uipath " + ($args -join ' ')

          Write-Output "Running command: $command"
          # Execute the command
          & uipath @args

          # Output the executed command for debugging or downstream use
          echo "::set-output name=command::$command"