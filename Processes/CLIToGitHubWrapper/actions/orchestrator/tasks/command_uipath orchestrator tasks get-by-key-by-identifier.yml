name: uipath-orchestrator-tasks-get-by-key-by-identifier
description: |
  uipath orchestrator tasks get-by-key-by-identifier - Gets a Task with the given guid.

  OAuth required scopes: OR.Tasks or OR.Tasks.Read.

  Requires authentication.

  Usage:
  uipath orchestrator tasks get-by-key-by-identifier [command options] [arguments...]

on:
  workflow_call:
    inputs:
      folder_id:
        description: Folder/OrganizationUnit Id
        required: true
        type: number
      identifier:
        description: The guid of the Task to be retrieved
        required: true
        type: string
      count:
        description: Indicates whether the total count of items within a collection are returned in the result
        required: false
        type: boolean
        default: false
      expand:
        description: Indicates the related entities to be represented inline. The maximum depth is 2
        required: false
        type: string
      filter:
        description: Restricts the set of items returned. The maximum number of expressions is 100
        required: false
        type: string
      orderby:
        description: Specifies the order in which items are returned. The maximum number of expressions is 5
        required: false
        type: string
      select:
        description: Limits the properties returned in the result
        required: false
        type: string
      skip:
        description: Excludes the specified number of items of the queried collection from the result
        required: false
        type: number
        default: 0
      top:
        description: Limits the number of items returned from a collection. The maximum value is 1000
        required: false
        type: number
        default: 100

jobs:
  run-command:
    runs-on: [windows, self-hosted]
    outputs:
      task-output: ${{ steps.run_cli_command.outputs.task-output }}
    steps:
      - name: Build and run uipath orchestrator tasks get-by-key-by-identifier command
        id: run_cli_command
        shell: pwsh
        run: |
          # Initialize argument array
          $args = @(
            'orchestrator'
            'tasks'
            'get-by-key-by-identifier'
          )

          # Required parameters
          $args += '--folder-id' 
          $args += ${{ inputs.folder_id }}.ToString()

          $args += '--identifier'
          $args += "$(${{ inputs.identifier }})"

          # Optional boolean: count
          if (${{ inputs.count }} -eq $true) {
            $args += '--count'
            $args += 'true'
          } else {
            # Explicitly not adding '--count' if false or omitted per CLI behavior
          }

          # Optional string parameters - added only if provided and non-empty
          if ('${{ inputs.expand }}' -and '${{ inputs.expand }}'.Trim() -ne '') {
            $args += '--expand'
            $args += "${{ inputs.expand }}"
          }

          if ('${{ inputs.filter }}' -and '${{ inputs.filter }}'.Trim() -ne '') {
            $args += '--filter'
            $args += "${{ inputs.filter }}"
          }

          if ('${{ inputs.orderby }}' -and '${{ inputs.orderby }}'.Trim() -ne '') {
            $args += '--orderby'
            $args += "${{ inputs.orderby }}"
          }

          if ('${{ inputs.select }}' -and '${{ inputs.select }}'.Trim() -ne '') {
            $args += '--select'
            $args += "${{ inputs.select }}"
          }

          # Optional integer parameters with default values
          if (${{ inputs.skip }} -gt 0) {
            $args += '--skip'
            $args += ${{ inputs.skip }}.ToString()
          }

          if (${{ inputs.top }} -gt 0 -and ${{ inputs.top }} -le 1000) {
            $args += '--top'
            $args += ${{ inputs.top }}.ToString()
          }

          # Output the constructed command for debugging
          Write-Host "Running command: uipath $($args -join ' ')"

          # Run the uipath CLI with constructed arguments
          $output = & uipath @args
          Write-Output $output
          echo "::set-output name=task-output::$output"
