const core = require('@actions/core');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const glob = require('glob');

async function buildVSProject(projectPath, version) {
  core.info('Building .NET project...');
  
  // Find .csproj file
  const csprojFiles = glob.sync('**/*.csproj', { cwd: projectPath });
  if (csprojFiles.length === 0) {
    throw new Error('No .csproj file found in project directory');
  }
  
  const csprojPath = path.join(projectPath, csprojFiles[0]);
  core.info(`Found project file: ${csprojPath}`);
  
  // Restore dependencies
  core.info('Restoring dependencies...');
  execSync(`dotnet restore "${csprojPath}"`, { stdio: 'inherit' });
  
  // Build project
  core.info('Building project...');
  execSync(`dotnet build "${csprojPath}" --configuration Release --no-restore`, { stdio: 'inherit' });
  
  // Pack project
  core.info('Packing project...');
  execSync(`dotnet pack "${csprojPath}" --configuration Release --no-build -p:PackageVersion=${version} --output "${projectPath}"`, { stdio: 'inherit' });
  
  // Find generated package
  const nupkgFiles = glob.sync('*.nupkg', { cwd: projectPath });
  if (nupkgFiles.length === 0) {
    throw new Error('No .nupkg file generated');
  }
  
  return path.join(projectPath, nupkgFiles[0]);
}

async function buildUiPathProject(projectPath, projectId) {
  core.info('Building UiPath project...');
  
  // Check if uipcli is available
  try {
    execSync('uipcli --version', { stdio: 'pipe' });
  } catch (error) {
    throw new Error('UiPath CLI (uipcli) is not available. Please install UiPath CLI.');
  }
  
  // Pack UiPath project
  core.info(`Packing UiPath project: ${projectId}`);
  execSync(`uipcli pack --project-path "${projectPath}"`, { stdio: 'inherit', cwd: projectPath });
  
  // Find generated package
  const nupkgFiles = glob.sync('*.nupkg', { cwd: projectPath });
  if (nupkgFiles.length === 0) {
    throw new Error('No .nupkg file generated by UiPath CLI');
  }
  
  return path.join(projectPath, nupkgFiles[0]);
}

async function main() {
  try {
    const projectId = core.getInput('project-id', { required: true });
    const projectPath = core.getInput('project-path', { required: true });
    const projectType = core.getInput('project-type', { required: true });
    const version = core.getInput('version', { required: true });
    const fullVersion = core.getInput('full-version', { required: true });
    
    core.info(`Building project: ${projectId}`);
    core.info(`Project path: ${projectPath}`);
    core.info(`Project type: ${projectType}`);
    core.info(`Version: ${version}`);
    
    // Verify project path exists
    if (!fs.existsSync(projectPath)) {
      throw new Error(`Project path does not exist: ${projectPath}`);
    }
    
    let packagePath;
    
    // Build based on project type
    if (projectType.startsWith('vs')) {
      packagePath = await buildVSProject(projectPath, version);
    } else if (projectType.startsWith('uipath')) {
      packagePath = await buildUiPathProject(projectPath, projectId);
    } else {
      throw new Error(`Unsupported project type: ${projectType}`);
    }
    
    core.info(`Package generated: ${packagePath}`);
    
    // Upload artifact using actions/upload-artifact equivalent
    // Since we can't directly call other actions from JavaScript, we'll output the necessary info
    core.setOutput('package-path', packagePath);
    core.setOutput('artifact-name', fullVersion);
    
    // Create a summary
    await core.summary
      .addHeading('Build Complete')
      .addTable([
        [{data: 'Property', header: true}, {data: 'Value', header: true}],
        ['Project ID', projectId],
        ['Project Type', projectType],
        ['Version', version],
        ['Package Path', packagePath],
        ['Artifact Name', fullVersion]
      ])
      .write();
      
  } catch (error) {
    core.setFailed(`Build failed: ${error.message}`);
    core.error(error.stack || error.toString());
  }
}

if (require.main === module) {
  main();
}

module.exports = { main };
