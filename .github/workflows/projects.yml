name: Build Changed Projects

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  initialize:
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v3

      - name: Configure Git for GitHub Actions
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

  detect:
    needs: initialize
    uses: ./.github/workflows/step-detect-changes.yml
    
  project:
    environment: Dev
    name: Build Changed Projects
    if: ${{ needs.detect.outputs.matrix != '{"include":[]}' }}
    needs: detect
    strategy:
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v3
        name: "Checkout Project ${{ matrix.id }}"
        with: { fetch-depth: 0 }

      - id: compute-version
        name: "Compute Version for ${{ matrix.id }}"
        shell: powershell
        run: |
          $projectId = "${{ matrix.id }}"
          $yy = [int](Get-Date -Format "yy")
          $mm = [int](Get-Date -Format "MM")
          $base = "$yy.$mm"

          git fetch --tags

          $pattern = "$projectId@$base.*"
          $tags = git tag --list $pattern

          if (-not $tags) {
            $patch = 0
          } else {
            $patches = $tags | ForEach-Object {
              if ($_ -match "@$base\.(\d+)$") { [int]$matches[1] } else { 0 }
            }
            $patch = ($patches | Measure-Object -Maximum).Maximum + 1
          }

          $version = "$base.$patch"
          $fullVersion = "$projectId@$version"

          Write-Host "Computed version: $fullVersion"
          "VERSION=$version" >> $env:GITHUB_ENV
          "FULL_VERSION=$fullVersion" >> $env:GITHUB_ENV
          "version=$version" >> $env:GITHUB_OUTPUT
          "full_version=$fullVersion" >> $env:GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - name: Restore, Build and Package VS Project
        if: ${{ startsWith(matrix.type, 'vs') }}
        shell: powershell
        id: build-vs
        run: |
          cd ${{ matrix.path }}
          $csproj = Get-ChildItem *.csproj -Recurse | Select-Object -First 1
          if ($csproj -ne $null) {
            dotnet restore $csproj.FullName
            dotnet build $csproj.FullName --configuration Release
            dotnet pack $csproj.FullName --configuration Release -p:PackageVersion=${{ steps.compute-version.outputs.version }} --output ./
          } else {
            Write-Host "No .csproj found. Skipping."
            exit 1
          }
          "nuget_path=$version" >> $env:GITHUB_OUTPUT

      - name: Restore, Build and Package Project
        if: ${{ startsWith(matrix.type, 'uipath') }}
        shell: powershell
        id: build-uipath
        run: |
          echo "Packing UiPath project ${{ matrix.id }}"
          cd ${{ matrix.path }}
          uipcli pack --project-path .
     
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.compute-version.outputs.version.full_version }}
          path: ${{ matrix.path }}/*.nupkg
        id: upload-artifact
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.compute-version.outputs.full_version }}
          release_name: Release ${{ steps.compute-version.outputs.full_version }}
          draft: false
          prerelease: false
      
      - name: Publish NuGet Package to GitHub Packages
        shell: powershell
        run: |
          $packagePath = "${{ matrix.path }}/${{ matrix.id }}.${{ steps.compute-version.outputs.version }}.nupkg"
          Write-Host "Pushing package to GitHub Packages: $packagePath"

          dotnet nuget push @(
              "$packagePath",
              "--api-key", "${{ secrets.GITHUB_TOKEN }}",
              "--source", "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json",
              "--skip-duplicate"
          )
    
      - name: Publish NuGet Package to nuget.org
        shell: powershell
        run: |
          $packagePath = "${{ matrix.path }}/${{ matrix.id }}.${{ steps.compute-version.outputs.version }}.nupkg"
          Write-Host "Pushing package to nuget.org: $packagePath"
          $apiKey = "${{ secrets.NUGET_ORG_API_KEY }}"
          if (-not $apiKey) {
            Write-Error "NUGET_ORG_API_KEY is not set. Skipping nuget.org push."
            exit 1
          }
          dotnet nuget push @(
            "$packagePath",
            "--api-key", "${{ secrets.NUGET_ORG_API_KEY }}",
            "--source", "https://api.nuget.org/v3/index.json",
            "--skip-duplicate"
          )
        

  # build-uipath:
  #   needs: detect
  #   if: needs.detect.outputs.matrix != '{"include":[]}'
  #   runs-on: [self-hosted, windows]
  #   strategy:
  #     matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Build UiPath Project ${{ matrix.id }}
  #       if: startsWith(matrix.type, 'uipath-')
  #       run: |
  #         echo "Packing UiPath project ${{ matrix.id }}"
  #         cd ${{ matrix.path }}
  #         uipcli pack --project-path .

  # build-vs:
  #   needs: detect
  #   if: needs.detect.outputs.matrix != '{"include":[]}'
  #   strategy:
  #     matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
  #   uses: ./.github/workflows/vs-project.yml
  #   with:
  #     id: ${{ matrix.id }}
  #     path: ${{ matrix.path }}
  #   secrets: inherit
