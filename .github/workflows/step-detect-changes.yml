name: Detect Changed Projects

on:
  workflow_call:
    outputs:
      matrix:
        description: "Changed projects matrix"
        value: ${{ jobs.detect.outputs.matrix }}

jobs:
  detect:
    runs-on: [windows, self-hosted]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Required for HEAD~1 to work

      - name: Download jq
        run: |
          Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile jq.exe
        shell: powershell

      - name: Add jq to PATH
        run: |
          $env:PATH = "$PWD;$env:PATH"
          jq.exe --version
        shell: powershell

      - name: Detect Changed Projects
        id: set-matrix
        shell: powershell
        run: |
          Write-Host "Detecting changes..."
          try {
            $changedFiles = git diff --name-only $env:GITHUB_EVENT_BEFORE $env:GITHUB_SHA
            if (-not $changedFiles) {
              $changedFiles = git diff --name-only HEAD~1 HEAD
            }
          } catch {
            $changedFiles = git diff --name-only HEAD~1 HEAD
          }

          Write-Host "Changed files:"
          $changedFiles

          $monoJson = Get-Content "mono.json" | ConvertFrom-Json
          $projectMap = @{}
          $matchedIds = @{}

          # Map all projects by ID
          foreach ($project in $monoJson.projects) {
            $projectMap[$project.id] = $project
          }

          # First pass: mark directly changed projects
          foreach ($project in $monoJson.projects) {
            if (-not $project.build) { continue }

            $projectPath = $project.path.Replace('/', '\')
            foreach ($file in $changedFiles) {
              $filePath = $file.Replace('/', '\')
              if ($filePath -like "$projectPath*") {
                $matchedIds[$project.id] = $true
                break
              }
            }
          }

          # Recursive dependency expander
          function Add-DependentProjectsRecursively {
            param (
              [hashtable]$projectMap,
              [hashtable]$matchedIds
            )

            $dependentsAdded = $false

            foreach ($project in $projectMap.Values) {
              if ($matchedIds.ContainsKey($project.id)) { continue }

              if ($project.PSObject.Properties['dependsOn']) {
                foreach ($depId in $project.dependsOn) {
                  if ($matchedIds.ContainsKey($depId)) {
                    $matchedIds[$project.id] = $true
                    $dependentsAdded = $true
                    break
                  }
                }
              }
            }

            if ($dependentsAdded) {
              Add-DependentProjectsRecursively -projectMap $projectMap -matchedIds $matchedIds
            }
          }

          # Expand all transitive dependents
          Add-DependentProjectsRecursively -projectMap $projectMap -matchedIds $matchedIds

          # Build final matched list
          $matched = @()
          foreach ($id in $matchedIds.Keys) {
            $project = $projectMap[$id]
            $matched += [PSCustomObject]@{
              id          = $project.id
              path        = $project.path
              type        = $project.type
              deploySteps = $project.deploySteps
            }
          }

          if ($matched.Count -eq 0) {
            Write-Host "No relevant changes detected."
            $matrix = '{"include":[]}'
          }
          else {
            $json = $matched | ConvertTo-Json -Depth 5 -Compress
            if ($matched.Count -eq 1) {
              $matrix = "{`"include`":[${json}]}"
            } else {
              $matrix = "{`"include`":$json}"
            }
          }
          Write-Host "Detected matrix: $matrix"
          "matrix=$matrix" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
