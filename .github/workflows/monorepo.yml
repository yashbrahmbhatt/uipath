name: Monorepo Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  detect-changes:
    runs-on: [self-hosted, windows]
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Action Dependencies
        run: |
          cd .github/actions/build-matrix
          npm install
        shell: powershell

      - name: Build Matrix
        id: build-matrix
        uses: ./.github/actions/build-matrix
        with:
          mono-config-path: 'mono.json'

  build:
    name: Build ${{ matrix.id }}
    environment: Dev
    if: ${{ needs.detect-changes.outputs.matrix != '{"include":[]}' }}
    needs: detect-changes
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      max-parallel: 1
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            8.0.x

      - name: Create Local Package Source
        run: |
          $localSource = "${{ github.workspace }}/local-packages"
          New-Item -ItemType Directory -Path $localSource -Force
          dotnet nuget add source $localSource --name "LocalBuild"
          "LOCAL_PACKAGE_SOURCE=$localSource" >> $env:GITHUB_ENV
        shell: powershell

      - name: Download Previous Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/local-packages
          merge-multiple: true
        continue-on-error: true

      - name: Install Action Dependencies
        run: |
          $actions = @('compute-version', 'build-artifact', 'create-github-tag', 'publish-github-packages', 'publish-nuget', 'publish-orchestrator', 'test-project')
          $originalLocation = Get-Location
          foreach ($action in $actions) {
            $actionPath = ".github/actions/$action"
            if (Test-Path $actionPath) {
              Write-Host "Installing dependencies for $action..."
              Set-Location $actionPath
              npm install
              Set-Location $originalLocation
            } else {
              Write-Warning "Action path not found: $actionPath"
            }
          }
        shell: powershell

      - name: Compute Version
        id: version
        uses: ./.github/actions/compute-version
        with:
          project-id: ${{ matrix.id }}

      - name: Build Artifact
        id: build
        uses: ./.github/actions/build-artifact
        with:
          project-id: ${{ matrix.id }}
          project-path: ${{ matrix.path }}
          project-type: ${{ matrix.type }}
          version: ${{ steps.version.outputs.version }}
          full-version: ${{ steps.version.outputs.full-version }}

      - name: Run Tests
        id: test
        if: ${{ matrix.test }}
        uses: ./.github/actions/test-project
        with:
          project-id: ${{ matrix.id }}
          test-path: ${{ matrix.testPath }}
          project-type: ${{ matrix.type }}
        env:
          # UiPath Orchestrator Test Configuration
          UIP_ACCOUNT_NAME: ${{ vars.UIP_ACCOUNT_NAME }}
          UIP_APPLICATION_ID: ${{ vars.UIP_APPLICATION_ID }}
          UIP_APPLICATION_SECRET: ${{ secrets.UIP_APPLICATION_SECRET }}
          UIP_TENANT_NAME: ${{ vars.UIP_TENANT_NAME }}
        continue-on-error: false

      - name: Check Test Results
        if: ${{ matrix.test }}
        run: |
          $testPassed = "${{ steps.test.outputs.test-passed }}"
          $testCount = "${{ steps.test.outputs.test-count }}"
          $passedCount = "${{ steps.test.outputs.passed-count }}"
          $failedCount = "${{ steps.test.outputs.failed-count }}"
          
          Write-Host "Test Results for ${{ matrix.id }}:"
          Write-Host "  Total: $testCount"
          Write-Host "  Passed: $passedCount"
          Write-Host "  Failed: $failedCount"
          
          if ($testPassed -eq "false") {
            Write-Error "Tests failed for ${{ matrix.id }}"
            exit 1
          } else {
            Write-Host "All tests passed for ${{ matrix.id }}"
          }
        shell: powershell

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.full-version }}
          path: ${{ steps.build.outputs.package-path }}

      - name: Add Package to Local Source
        run: |
          $packagePath = "${{ steps.build.outputs.package-path }}"
          $localSource = $env:LOCAL_PACKAGE_SOURCE
          if ((Test-Path $packagePath) -and $localSource) {
            $packageName = Split-Path $packagePath -Leaf
            $localPackagePath = Join-Path $localSource $packageName
            Copy-Item $packagePath $localPackagePath -Force
            Write-Host "Package added to local source: $localPackagePath"
            
            # Refresh local source
            dotnet nuget locals all --clear
          }
        shell: powershell

      - name: Create GitHub Tag
        if: ${{ matrix.deploy }}
        uses: ./.github/actions/create-github-tag
        with:
          full-version: ${{ steps.version.outputs.full-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to UiPath Orchestrator
        if: ${{ matrix.deploy && contains(matrix.deploySteps, 'orchestrator') }}
        uses: ./.github/actions/publish-orchestrator
        with:
          package-path: ${{ steps.build.outputs.package-path }}
          orchestrator-url: ${{ vars.UIP_URL }}
          account-name: ${{ vars.UIP_ACCOUNT_NAME }}
          # Use existing UiPath secrets for application authentication
          application-id: ${{ vars.UIP_APPLICATION_ID }}
          application-secret: ${{ secrets.UIP_APPLICATION_SECRET }}
          tenant-name: ${{ vars.UIP_TENANT_NAME }}
          
      
      - name: Publish to GitHub Packages
        if: ${{ matrix.deploy && contains(matrix.deploySteps, 'nuget') }}
        uses: ./.github/actions/publish-github-packages
        with:
          package-path: ${{ steps.build.outputs.package-path }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository-owner: ${{ github.repository_owner }}
    
      - name: Publish to NuGet.org
        if: ${{ matrix.deploy && contains(matrix.deploySteps, 'nuget') }}
        uses: ./.github/actions/publish-nuget
        with:
          package-path: ${{ steps.build.outputs.package-path }}
          nuget-api-key: ${{ secrets.NUGET_ORG_API_KEY }}
