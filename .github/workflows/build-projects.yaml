name: Build Changed Projects

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  detect:
    uses: ./.github/workflows/detect-changes.yml

  build-uipath:
    needs: detect
    if: needs.detect.outputs.matrix != '{"include":[]}'
    runs-on: [self-hosted, windows]
    strategy:
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Build UiPath Project ${{ matrix.id }}
        if: startsWith(matrix.type, 'uipath-')
        run: |
          echo "Packing UiPath project ${{ matrix.id }}"
          cd ${{ matrix.path }}
          uipcli pack --project-path .

  build-vs:
    needs: detect
    if: needs.detect.outputs.matrix != '{"include":[]}'
    runs-on: [self-hosted, windows]
    strategy:
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to fetch all tags for versioning

      - name: Generate Semantic Version (YY.MM.X)
        if: matrix.type == 'vs'
        id: version
        shell: powershell
        run: |
          $yy = (Get-Date -Format "yy")
          $mm = (Get-Date -Format "MM")
          $base = "$yy.$mm"
              
          git fetch --tags
              
          $count = (git tag --list "$base.*" | Measure-Object).Count
          $version = "$base.$count"
              
          Write-Host "Computed version: $version"
          "VERSION=$version" >> $env:GITHUB_ENV
          "version=$version" >> $env:GITHUB_OUTPUT


      - name: Build Visual Studio Project ${{ matrix.id }}
        if: matrix.type == 'vs'
        run: |
          echo "Building VS project ${{ matrix.id }} at path ${{ matrix.path }}"
          cd ${{ matrix.path }}

          $csproj = Get-ChildItem *.csproj -Recurse | Select-Object -First 1
          if ($csproj -ne $null) {
            dotnet restore $csproj.FullName
            dotnet build $csproj.FullName --configuration Release
            dotnet pack $csproj.FullName --configuration Release -p:PackageVersion=$env:VERSION --output ./bin/Release
          } else {
            echo "No .csproj found. Skipping."
            exit 1
          }
        shell: powershell

      - name: Upload NuGet Package ${{ matrix.id }}
        if: matrix.type == 'vs'
        uses: actions/upload-artifact@v4
        with:
          name: nuget-${{ matrix.id }}-${{ steps.version.outputs.version }}
          path: ${{ matrix.path }}/bin/Release/*.nupkg

      - name: Create Git Tag for Version
        if: matrix.type == 'vs'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $env:VERSION
          git push origin $env:VERSION
        shell: powershell
