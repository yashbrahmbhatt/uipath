name: Validate UiPath Orchestrator Process Schedule
description: |
  NAME:
     uipath orchestrator process-schedules validate-process-schedule - Validates the input which would be used to create a process schedule.

  USAGE:
     uipath orchestrator process-schedules validate-process-schedule [command options] [arguments...]

  DESCRIPTION:
     OAuth required scopes: OR.Jobs or OR.Jobs.Write.

     Required permissions: Schedules.Create.

  OPTIONS:
     --folder-id integer (required)
        Folder/OrganizationUnit Id

     --process-schedule object (required)
        Defines the schedule of a process that can be executed at regular intervals, on selected Robots, all of them or a specified number of Robots.

        Example:
           ActivateOnJobComplete=boolean; AlertPendingExpression=string; AlertRunningExpression=string; CalendarId=integer; CalendarKey=string; CalendarName=string; ConsecutiveJobFailuresThreshold=integer; Description=string; Enabled=boolean; EnvironmentId=string; EnvironmentName=string; ExecutorRobots[0].Description=string; ExecutorRobots[0].Id=integer; ExecutorRobots[0].MachineName=string; ExecutorRobots[0].Name=string; ExternalJobKey=string; ExternalJobKeyScheduler=string; Id=integer; InputArguments=string; IsConnected=boolean; ItemsActivationThreshold=integer; ItemsPerJobActivationTarget=string; JobFailuresGracePeriodInHours=integer; JobPriority=string; Key=string; KillProcessExpression=string; MachineRobots[0].MachineId=integer; MachineRobots[0].MachineName=string; MachineRobots[0].RobotId=integer; MachineRobots[0].RobotUserName=string; MachineRobots[0].SessionId=integer; MachineRobots[0].SessionName=string; MaxJobsForActivation=integer; Name=string; PackageName=string; QueueDefinitionId=integer; QueueDefinitionName=string; ReleaseId=integer; ReleaseKey=string; ReleaseName=string; ResumeOnSameContext=boolean; RunAsMe=boolean; RuntimeType=string; SpecificPriorityValue=integer; StartProcessCron=string; StartProcessCronDetails=string; StartProcessCronSummary=string; StartProcessNextOccurrence=string; StartStrategy=integer; StopProcessDate=string; StopProcessExpression=string; StopStrategy=string; Tags[0].DisplayName=string; Tags[0].DisplayValue=string; Tags[0].Name=string; Tags[0].Value=string; TimeZoneIana=string; TimeZoneId=string; UseCalendar=boolean

     --expand string
        Indicates the related entities to be represented inline. The maximum depth is 2.

     --select string
        Limits the properties returned in the result.

on:
  workflow_call:
    inputs:
      folder_id:
        description: 'Folder/OrganizationUnit Id (required)'
        required: true
        type: number
      process_schedule:
        description: 'Defines the schedule of a process in JSON string format (required)'
        required: true
        type: string
      expand:
        description: 'Related entities to be represented inline (optional)'
        required: false
        type: string
        default: ''
      select:
        description: 'Properties to return in result (optional)'
        required: false
        type: string
        default: ''
    secrets: {}
jobs:
  validate-process-schedule:
    runs-on: [windows, self-hosted]
    outputs: {}
    steps:
      - name: Validate UiPath Orchestrator Process Schedule Command
        shell: pwsh
        run: |
          # Initialize argument array for command
          $args = @("orchestrator", "process-schedules", "validate-process-schedule")
          
          # Append mandatory folder-id argument
          $args += "--folder-id"
          $args += ${{ inputs.folder_id }}

          # Append mandatory process-schedule argument, escaping quotes for correct CLI usage
          $escapedProcessSchedule = ${{ inputs.process_schedule }} -replace '"', '\"'
          $args += "--process-schedule"
          $args += "$escapedProcessSchedule"

          # Append optional --expand if provided
          if ("${{ inputs.expand }}" -ne "") {
            $args += "--expand"
            $args += "${{ inputs.expand }}"
          }

          # Append optional --select if provided
          if ("${{ inputs.select }}" -ne "") {
            $args += "--select"
            $args += "${{ inputs.select }}"
          }

          # Execute the uipath command with constructed arguments
          uipath @args
