name: uipath-orchestrator-sessions-get-global-sessions
description: |
  OAuth required scopes: OR.Robots or OR.Robots.Read.

  Required permissions: (Robots.View and Users.View - Classic and modern robot sessions are returned.) and (Users.View or Machines.Create or Machines.Edit - Modern robot sessions are returned. Users.View is required only when the robot is expanded) and (Robots.View - Classic robot sessions are returned. Users.View is required only when the robot is expanded).

  Gets all the tenant sessions.

inputs:
  count:
    description: Indicates whether the total count of items within a collection are returned in the result.
    required: false
    default: 'false'
    type: boolean
  expand:
    description: Indicates the related entities to be represented inline. The maximum depth is 2.
    required: false
    default: ''
    type: string
  filter:
    description: Restricts the set of items returned. The maximum number of expressions is 100.
    required: false
    default: ''
    type: string
  orderby:
    description: Specifies the order in which items are returned. The maximum number of expressions is 5.
    required: false
    default: ''
    type: string
  select:
    description: Limits the properties returned in the result.
    required: false
    default: ''
    type: string
  skip:
    description: Excludes the specified number of items of the queried collection from the result.
    required: false
    default: ''
    type: string
  top:
    description: Limits the number of items returned from a collection. The maximum value is 1000.
    required: false
    default: ''
    type: string

runs-on: [windows, self-hosted]

permissions:
  contents: read

jobs:
  run-get-global-sessions:
    runs-on: [windows, self-hosted]
    steps:
      - name: Run UiPath orchestrator sessions get-global-sessions command
        shell: pwsh
        run: |
          # Initialize argument array with mandatory command parts
          $args = @("uipath", "orchestrator", "sessions", "get-global-sessions")

          # Append --count if true
          if ('${{ inputs.count }}' -eq 'true') {
              $args += "--count"
              $args += $true
          }

          # Append --expand if provided and not empty
          if ('${{ inputs.expand }}'.Trim() -ne '') {
              $args += "--expand"
              $args += '${{ inputs.expand }}'
          }

          # Append --filter if provided
          if ('${{ inputs.filter }}'.Trim() -ne '') {
              $args += "--filter"
              $args += '${{ inputs.filter }}'
          }

          # Append --orderby if provided
          if ('${{ inputs.orderby }}'.Trim() -ne '') {
              $args += "--orderby"
              $args += '${{ inputs.orderby }}'
          }

          # Append --select if provided
          if ('${{ inputs.select }}'.Trim() -ne '') {
              $args += "--select"
              $args += '${{ inputs.select }}'
          }

          # Append --skip if provided
          if ('${{ inputs.skip }}'.Trim() -ne '') {
              $args += "--skip"
              $args += '${{ inputs.skip }}'
          }

          # Append --top if provided
          if ('${{ inputs.top }}'.Trim() -ne '') {
              $args += "--top"
              $args += '${{ inputs.top }}'
          }

          # Execute the CLI command with built argument array
          & $args[0] $args[1..($args.Length - 1)] | Write-Output