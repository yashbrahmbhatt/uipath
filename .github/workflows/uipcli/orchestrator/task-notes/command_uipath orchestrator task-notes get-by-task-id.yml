name: uipath-orchestrator-task-notes-get-by-task-id
description: |
  OAuth required scopes: OR.Tasks or OR.Tasks.Read.

  Required permissions: Tasks.View.

  Gets Task Notes for a Task with required Folder/OrganizationUnit Id and Task Id.

on:
  workflow_call:
    inputs:
      folder_id:
        description: 'Folder/OrganizationUnit Id'
        required: true
        type: integer
      task_id:
        description: 'Id of the task'
        required: true
        type: integer
      count:
        description: 'Indicates whether the total count of items within a collection are returned in the result.'
        required: false
        type: boolean
        default: false
      expand:
        description: 'Indicates the related entities to be represented inline. The maximum depth is 2.'
        required: false
        type: string
        default: ''
      filter:
        description: 'Restricts the set of items returned. The maximum number of expressions is 100.'
        required: false
        type: string
        default: ''
      orderby:
        description: 'Specifies the order in which items are returned. The maximum number of expressions is 5.'
        required: false
        type: string
        default: ''
      select:
        description: 'Limits the properties returned in the result.'
        required: false
        type: string
        default: ''
      skip:
        description: 'Excludes the specified number of items of the queried collection from the result.'
        required: false
        type: integer
        default: 0
      top:
        description: 'Limits the number of items returned from a collection. The maximum value is 1000.'
        required: false
        type: integer
        default: 0

jobs:
  run-task-notes-get:
    runs-on: [windows, self-hosted]
    steps:
    - name: Run uipath orchestrator task-notes get-by-task-id
      shell: pwsh
      run: |
        # Construct argument list with required parameters
        $argsList = @(
          'orchestrator', 'task-notes', 'get-by-task-id',
          '--folder-id', ${{ inputs.folder_id }},
          '--task-id', ${{ inputs.task_id }}
        )

        # Add optional boolean parameter --count if true
        if (${ { inputs.count } } -eq $true) {
          $argsList += '--count'
        }

        # Add optional string parameters if provided and non-empty
        if ([string]::IsNullOrEmpty(${{ inputs.expand }}) -eq $false) {
          $argsList += '--expand'
          $argsList += ${{ inputs.expand }}
        }

        if ([string]::IsNullOrEmpty(${{ inputs.filter }}) -eq $false) {
          $argsList += '--filter'
          $argsList += ${{ inputs.filter }}
        }

        if ([string]::IsNullOrEmpty(${{ inputs.orderby }}) -eq $false) {
          $argsList += '--orderby'
          $argsList += ${{ inputs.orderby }}
        }

        if ([string]::IsNullOrEmpty(${{ inputs.select }}) -eq $false) {
          $argsList += '--select'
          $argsList += ${{ inputs.select }}
        }

        # Add optional integer parameters if greater than zero
        if (${ { inputs.skip } } -gt 0) {
          $argsList += '--skip'
          $argsList += ${{ inputs.skip }}
        }

        if (${ { inputs.top } } -gt 0) {
          $argsList += '--top'
          $argsList += ${{ inputs.top }}
        }

        # Run the command by invoking uipath CLI with the constructed arguments
        uipath @argsList
