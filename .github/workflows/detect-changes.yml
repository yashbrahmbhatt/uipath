# .github/workflows/detect-changes.yml

name: Detect Changed Projects

on:
  workflow_call:
    outputs:
      matrix:
        description: "Changed projects matrix"
        value: ${{ jobs.detect.outputs.matrix }}

jobs:
  detect:
    runs-on: [windows, self-hosted]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2 # <-- fetch at least 2 commits for HEAD~1 to work

      - name: Download jq
        run: |
          Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile jq.exe
        shell: powershell

      - name: Add jq to PATH
        run: |
          $env:PATH = "$PWD;$env:PATH"
          jq.exe --version
        shell: powershell

      - name: Detect Changed Projects
        id: set-matrix
        shell: powershell
        run: |
          Write-Host "Detecting changes..."
          try {
            $changedFiles = git diff --name-only $env:GITHUB_EVENT_BEFORE $env:GITHUB_SHA
            if (-not $changedFiles) {
              $changedFiles = git diff --name-only HEAD~1 HEAD
            }
          } catch {
            $changedFiles = git diff --name-only HEAD~1 HEAD
          }
          Write-Host "Changed files:"
          $changedFiles


          $monoJson = Get-Content "mono.json" | ConvertFrom-Json
          $matched = @()

          foreach ($project in $monoJson.projects) {
            if (-not $project.build) {
              continue
            }
          
            $projectPath = $project.path.Replace('/', '\')  # Normalize project path to Windows-style
          
            foreach ($file in $changedFiles) {
              $filePath = $file.Replace('/', '\')  # Normalize changed file path
              if ($filePath -like "$projectPath*") {
                $matched += [PSCustomObject]@{
                  id           = $project.id
                  path         = $project.path
                  type         = $project.type
                  deploySteps  = $project.deploySteps
                }
                break  # Don't need to match this project again
              }
            }
          }

          if ($matched.Count -eq 0) {
            Write-Host "No relevant changes detected."
            $matrix = '{"include":[]}'
          }
          else {
            $json = $matched | ConvertTo-Json -Depth 5 -Compress
            # Ensure it's wrapped as an array
            if ($matched.Count -eq 1) {
              $matrix = "{`"include`":[${json}]}"
            }
            else {
              $matrix = "{`"include`":$json}"
            }
          }
          "matrix=$matrix" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
